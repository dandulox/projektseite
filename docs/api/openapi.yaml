# OpenAPI 3.0.0 Spezifikation für Projektseite v3.0
openapi: 3.0.0
info:
  title: Projektseite API
  description: Moderne Projektmanagement-API mit TypeScript und Prisma
  version: 3.0.0
  contact:
    name: Projektseite Team
    email: team@projektseite.de
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api
    description: Development Server
  - url: https://api.projektseite.de
    description: Production Server

paths:
  # Health Check
  /health:
    get:
      summary: Health Check
      description: Überprüft den Status der API und Datenbank
      tags:
        - System
      responses:
        '200':
          description: System ist gesund
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "3.0.0"
                  database:
                    type: object
                    properties:
                      ok:
                        type: boolean
                      latency:
                        type: number
        '503':
          description: System ist nicht verfügbar
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Tasks
  /tasks:
    get:
      summary: Get Tasks
      description: Ruft Tasks mit Filtern und Paginierung ab
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TaskStatus'
        - name: priority
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Priority'
        - name: assigneeId
          in: query
          schema:
            type: string
        - name: projectId
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
            maxLength: 100
      responses:
        '200':
          description: Tasks erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create Task
      description: Erstellt eine neue Task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task erfolgreich erstellt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tasks/{id}:
    get:
      summary: Get Task by ID
      description: Ruft eine Task anhand der ID ab
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        '200':
          description: Task erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    patch:
      summary: Update Task
      description: Aktualisiert eine Task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task erfolgreich aktualisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    delete:
      summary: Delete Task
      description: Löscht eine Task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        '204':
          description: Task erfolgreich gelöscht
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /tasks/{id}/status:
    patch:
      summary: Update Task Status
      description: Aktualisiert den Status einer Task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/TaskStatus'
              required:
                - status
      responses:
        '200':
          description: Task Status erfolgreich aktualisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /tasks/{id}/assign:
    patch:
      summary: Assign Task
      description: Weist eine Task einem Benutzer zu
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assigneeId:
                  type: string
                  format: cuid
              required:
                - assigneeId
      responses:
        '200':
          description: Task erfolgreich zugewiesen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /tasks/my-tasks:
    get:
      summary: Get My Tasks
      description: Ruft die Tasks des aktuellen Benutzers ab
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TaskStatus'
        - name: priority
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Priority'
        - name: projectId
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
            maxLength: 100
      responses:
        '200':
          description: Tasks erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /tasks/stats:
    get:
      summary: Get Task Statistics
      description: Ruft Statistiken für Tasks ab
      tags:
        - Tasks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statistiken erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /tasks/overdue:
    get:
      summary: Get Overdue Tasks
      description: Ruft überfällige Tasks ab
      tags:
        - Tasks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Überfällige Tasks erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /tasks/due-soon:
    get:
      summary: Get Tasks Due Soon
      description: Ruft Tasks ab, die bald fällig sind
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: days
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 7
      responses:
        '200':
          description: Tasks erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Projects
  /projects:
    get:
      summary: Get Projects
      description: Ruft Projekte mit Filtern und Paginierung ab
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProjectStatus'
        - name: priority
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Priority'
        - name: visibility
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Visibility'
        - name: search
          in: query
          schema:
            type: string
            maxLength: 100
      responses:
        '200':
          description: Projekte erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      summary: Create Project
      description: Erstellt ein neues Projekt
      tags:
        - Projects
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Projekt erfolgreich erstellt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{id}:
    get:
      summary: Get Project by ID
      description: Ruft ein Projekt anhand der ID ab
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        '200':
          description: Projekt erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    patch:
      summary: Update Project
      description: Aktualisiert ein Projekt
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Projekt erfolgreich aktualisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    delete:
      summary: Delete Project
      description: Löscht ein Projekt
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        '204':
          description: Projekt erfolgreich gelöscht
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /projects/my-projects:
    get:
      summary: Get My Projects
      description: Ruft die Projekte des aktuellen Benutzers ab
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProjectStatus'
        - name: priority
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Priority'
        - name: search
          in: query
          schema:
            type: string
            maxLength: 100
      responses:
        '200':
          description: Projekte erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /projects/stats:
    get:
      summary: Get Project Statistics
      description: Ruft Statistiken für Projekte ab
      tags:
        - Projects
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statistiken erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{id}/completion:
    patch:
      summary: Update Project Completion
      description: Aktualisiert den Fertigstellungsgrad eines Projekts
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        '200':
          description: Fertigstellungsgrad erfolgreich aktualisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Base Schemas
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
        error:
          $ref: '#/components/schemas/ApiError'
        meta:
          $ref: '#/components/schemas/ResponseMeta'
      required:
        - success
        - meta

    ApiError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
        field:
          type: string
      required:
        - code
        - message

    ResponseMeta:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
        pagination:
          $ref: '#/components/schemas/PaginationMeta'
      required:
        - timestamp
        - requestId

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
      required:
        - page
        - limit
        - total
        - totalPages
        - hasNext
        - hasPrev

    # Enums
    UserRole:
      type: string
      enum:
        - ADMIN
        - USER
        - VIEWER

    ProjectStatus:
      type: string
      enum:
        - PLANNING
        - ACTIVE
        - ON_HOLD
        - COMPLETED
        - CANCELLED

    TaskStatus:
      type: string
      enum:
        - TODO
        - IN_PROGRESS
        - REVIEW
        - COMPLETED
        - CANCELLED

    Priority:
      type: string
      enum:
        - LOW
        - MEDIUM
        - HIGH
        - CRITICAL

    Visibility:
      type: string
      enum:
        - PRIVATE
        - TEAM
        - PUBLIC

    # Task Schemas
    Task:
      type: object
      properties:
        id:
          type: string
          format: cuid
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        assigneeId:
          type: string
          format: cuid
        projectId:
          type: string
          format: cuid
        moduleId:
          type: string
          format: cuid
        createdById:
          type: string
          format: cuid
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
          format: decimal
        actualHours:
          type: number
          format: decimal
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - status
        - priority
        - createdById
        - tags
        - createdAt
        - updatedAt

    CreateTaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        priority:
          $ref: '#/components/schemas/Priority'
        assigneeId:
          type: string
          format: cuid
        projectId:
          type: string
          format: cuid
        moduleId:
          type: string
          format: cuid
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
          minimum: 0
          maximum: 9999
        tags:
          type: array
          items:
            type: string
            maxLength: 50
          maxItems: 10
      required:
        - title

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        assigneeId:
          type: string
          format: cuid
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
          minimum: 0
          maximum: 9999
        actualHours:
          type: number
          minimum: 0
          maximum: 9999
        tags:
          type: array
          items:
            type: string
            maxLength: 50
          maxItems: 10

    TaskResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Task'

    TaskListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Task'

    TaskStatsResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                total:
                  type: integer
                todo:
                  type: integer
                inProgress:
                  type: integer
                review:
                  type: integer
                completed:
                  type: integer
                overdue:
                  type: integer
                dueSoon:
                  type: integer

    # Project Schemas
    Project:
      type: object
      properties:
        id:
          type: string
          format: cuid
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/ProjectStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        ownerId:
          type: string
          format: cuid
        teamId:
          type: string
          format: cuid
        visibility:
          $ref: '#/components/schemas/Visibility'
        startDate:
          type: string
          format: date-time
        targetDate:
          type: string
          format: date-time
        completionPercentage:
          type: integer
          minimum: 0
          maximum: 100
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - status
        - priority
        - ownerId
        - visibility
        - completionPercentage
        - createdAt
        - updatedAt

    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        priority:
          $ref: '#/components/schemas/Priority'
        teamId:
          type: string
          format: cuid
        visibility:
          $ref: '#/components/schemas/Visibility'
        startDate:
          type: string
          format: date-time
        targetDate:
          type: string
          format: date-time
      required:
        - name

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        status:
          $ref: '#/components/schemas/ProjectStatus'
        priority:
          $ref: '#/components/schemas/Priority'
        teamId:
          type: string
          format: cuid
        visibility:
          $ref: '#/components/schemas/Visibility'
        startDate:
          type: string
          format: date-time
        targetDate:
          type: string
          format: date-time

    ProjectResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Project'

    ProjectListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Project'

    ProjectStatsResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                total:
                  type: integer
                active:
                  type: integer
                completed:
                  type: integer
                onHold:
                  type: integer
                cancelled:
                  type: integer

  responses:
    ValidationError:
      description: Validierungsfehler
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            error:
              code: "VALIDATION_ERROR"
              message: "Validierungsfehler"
              details:
                - field: "title"
                  message: "Titel ist erforderlich"
            meta:
              timestamp: "2024-01-01T00:00:00.000Z"
              requestId: "req_1234567890_abcdef"

    UnauthorizedError:
      description: Nicht autorisiert
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            error:
              code: "UNAUTHORIZED"
              message: "Nicht autorisiert"
            meta:
              timestamp: "2024-01-01T00:00:00.000Z"
              requestId: "req_1234567890_abcdef"

    ForbiddenError:
      description: Zugriff verweigert
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            error:
              code: "FORBIDDEN"
              message: "Zugriff verweigert"
            meta:
              timestamp: "2024-01-01T00:00:00.000Z"
              requestId: "req_1234567890_abcdef"

    NotFoundError:
      description: Nicht gefunden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            error:
              code: "NOT_FOUND"
              message: "Ressource nicht gefunden"
            meta:
              timestamp: "2024-01-01T00:00:00.000Z"
              requestId: "req_1234567890_abcdef"

    InternalServerError:
      description: Interner Serverfehler
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            error:
              code: "INTERNAL_ERROR"
              message: "Ein unerwarteter Fehler ist aufgetreten"
            meta:
              timestamp: "2024-01-01T00:00:00.000Z"
              requestId: "req_1234567890_abcdef"

tags:
  - name: System
    description: System- und Health-Check-Endpunkte
  - name: Tasks
    description: Task-Management-Endpunkte
  - name: Projects
    description: Projekt-Management-Endpunkte
