// Prisma Schema f√ºr Projektseite v3.0
// Moderne, typisierte Datenbank-Schema mit Prisma ORM

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================
// USER MANAGEMENT
// ==============================================

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects    Project[] @relation("ProjectOwner")
  assignedTasks    Task[]    @relation("TaskAssignee")
  createdTasks     Task[]    @relation("TaskCreator")
  teamMemberships  TeamMembership[]
  notifications    Notification[]
  activityLogs     ActivityLog[]
  createdTeams     Team[]    @relation("TeamLeader")

  // Indexes
  @@index([role])
  @@index([isActive])
  @@map("users")
}

enum UserRole {
  ADMIN
  USER
  VIEWER
}

// ==============================================
// PROJECT MANAGEMENT
// ==============================================

model Project {
  id                  String        @id @default(cuid())
  name                String
  description         String?
  status              ProjectStatus @default(PLANNING)
  priority            Priority      @default(MEDIUM)
  ownerId             String
  teamId              String?
  visibility          Visibility    @default(PRIVATE)
  startDate           DateTime?
  targetDate          DateTime?
  completionPercentage Int          @default(0)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  owner   User    @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  team    Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull)
  modules Module[]
  tasks   Task[]
  activityLogs ActivityLog[]

  // Indexes
  @@index([ownerId])
  @@index([teamId])
  @@index([status])
  @@index([priority])
  @@index([visibility])
  @@index([targetDate])
  @@map("projects")
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

// ==============================================
// TASK MANAGEMENT
// ==============================================

model Task {
  id             String     @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus @default(TODO)
  priority       Priority   @default(MEDIUM)
  assigneeId     String?
  projectId      String?
  moduleId       String?
  createdById    String
  dueDate        DateTime?
  estimatedHours Decimal?   @db.Decimal(8,2)
  actualHours    Decimal?   @db.Decimal(8,2)
  tags           String[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  completedAt    DateTime?

  // Relations
  assignee User?    @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creator  User     @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Cascade)
  project  Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  module   Module?  @relation(fields: [moduleId], references: [id], onDelete: SetNull)
  comments TaskComment[]
  attachments TaskAttachment[]
  activities TaskActivity[]

  // Indexes
  @@index([assigneeId])
  @@index([projectId])
  @@index([moduleId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([assigneeId, status])
  @@index([projectId, status])
  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

// ==============================================
// MODULE MANAGEMENT
// ==============================================

model Module {
  id                  String        @id @default(cuid())
  projectId           String
  name                String
  description         String?
  status              ModuleStatus  @default(NOT_STARTED)
  priority            Priority      @default(MEDIUM)
  assignedTo          String?
  dueDate             DateTime?
  estimatedHours      Decimal?      @db.Decimal(8,2)
  actualHours         Decimal?      @db.Decimal(8,2)
  completionPercentage Int          @default(0)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]
  activities ModuleActivity[]

  // Indexes
  @@index([projectId])
  @@index([assignedTo])
  @@index([status])
  @@index([priority])
  @@map("modules")
}

enum ModuleStatus {
  NOT_STARTED
  IN_PROGRESS
  TESTING
  COMPLETED
}

// ==============================================
// TEAM MANAGEMENT
// ==============================================

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  leaderId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  leader   User             @relation("TeamLeader", fields: [leaderId], references: [id], onDelete: Cascade)
  members  TeamMembership[]
  projects Project[]

  // Indexes
  @@index([leaderId])
  @@index([isActive])
  @@map("teams")
}

model TeamMembership {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([teamId])
  @@index([userId])
  @@index([role])
  @@unique([teamId, userId])
  @@map("team_memberships")
}

enum TeamRole {
  LEADER
  MEMBER
  VIEWER
}

// ==============================================
// NOTIFICATION SYSTEM
// ==============================================

model Notification {
  id         String   @id @default(cuid())
  userId     String
  type       String
  title      String
  message    String
  fromUserId String?
  teamId     String?
  projectId  String?
  actionUrl  String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  readAt     DateTime?

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromUser User?    @relation("NotificationFromUser", fields: [fromUserId], references: [id], onDelete: SetNull)

  // Indexes
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([userId, isRead])
  @@map("notifications")
}

// ==============================================
// ACTIVITY LOGGING
// ==============================================

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String?
  entityType  String   // 'project', 'task', 'module', 'team'
  entityId    String
  action      String   // 'created', 'updated', 'deleted', 'status_changed'
  details     Json?
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes
  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("activity_logs")
}

// ==============================================
// TASK COMMENTS & ATTACHMENTS
// ==============================================

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation("TaskCommentUser", fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
  @@map("task_comments")
}

model TaskAttachment {
  id          String   @id @default(cuid())
  taskId      String
  userId      String
  filename    String
  originalName String
  filePath    String
  fileSize    Int
  mimeType    String
  uploadedAt  DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation("TaskAttachmentUser", fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([taskId])
  @@index([userId])
  @@map("task_attachments")
}

// ==============================================
// TASK ACTIVITIES
// ==============================================

model TaskActivity {
  id        String   @id @default(cuid())
  taskId    String
  userId    String?
  action    String
  details   Json?
  createdAt DateTime @default(now())

  // Relations
  task Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User? @relation("TaskActivityUser", fields: [userId], references: [id], onDelete: SetNull)

  // Indexes
  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
  @@map("task_activities")
}

model ModuleActivity {
  id        String   @id @default(cuid())
  moduleId  String
  userId    String?
  action    String
  details   Json?
  createdAt DateTime @default(now())

  // Relations
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  user   User?  @relation("ModuleActivityUser", fields: [userId], references: [id], onDelete: SetNull)

  // Indexes
  @@index([moduleId])
  @@index([userId])
  @@index([createdAt])
  @@map("module_activities")
}

// ==============================================
// COMMON ENUMS
// ==============================================

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Visibility {
  PRIVATE
  TEAM
  PUBLIC
}

