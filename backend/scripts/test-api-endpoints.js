const axios = require('axios');

// Konfiguration
const API_BASE_URL = 'http://localhost:3001/api';
const TEST_USER = {
  username: 'admin',
  password: 'admin'
};

let authToken = null;

async function testApiEndpoints() {
  console.log('üß™ Starte API-Endpunkt-Tests...\n');
  
  try {
    // 1. Health Check
    console.log('1Ô∏è‚É£ Teste Health Check...');
    try {
      const response = await axios.get('http://localhost:3001/health');
      console.log('‚úÖ Health Check:', response.data);
    } catch (error) {
      console.log('‚ùå Health Check fehlgeschlagen:', error.message);
    }

    // 2. Authentifizierung
    console.log('\n2Ô∏è‚É£ Teste Authentifizierung...');
    try {
      const response = await axios.post(`${API_BASE_URL}/auth/login`, TEST_USER);
      authToken = response.data.token;
      console.log('‚úÖ Authentifizierung erfolgreich');
      console.log(`   Token: ${authToken.substring(0, 20)}...`);
    } catch (error) {
      console.log('‚ùå Authentifizierung fehlgeschlagen:', error.response?.data || error.message);
      console.log('‚ö†Ô∏è Weitere Tests werden ohne Authentifizierung durchgef√ºhrt');
    }

    const headers = authToken ? { Authorization: `Bearer ${authToken}` } : {};

    // 3. Dashboard-Endpunkte
    console.log('\n3Ô∏è‚É£ Teste Dashboard-Endpunkte...');
    
    try {
      const response = await axios.get(`${API_BASE_URL}/dashboard/me`, { headers });
      console.log('‚úÖ Dashboard /me:', {
        widgets: Object.keys(response.data.widgets || {}),
        summary: response.data.summary
      });
    } catch (error) {
      console.log('‚ùå Dashboard /me fehlgeschlagen:', error.response?.data || error.message);
    }

    try {
      const response = await axios.get(`${API_BASE_URL}/dashboard/me/stats`, { headers });
      console.log('‚úÖ Dashboard /me/stats:', response.data);
    } catch (error) {
      console.log('‚ùå Dashboard /me/stats fehlgeschlagen:', error.response?.data || error.message);
    }

    // 4. Tasks-Endpunkte
    console.log('\n4Ô∏è‚É£ Teste Tasks-Endpunkte...');
    
    try {
      const response = await axios.get(`${API_BASE_URL}/tasks/my-tasks`, { headers });
      console.log('‚úÖ Tasks /my-tasks:', {
        count: response.data.tasks?.length || 0,
        pagination: response.data.pagination
      });
    } catch (error) {
      console.log('‚ùå Tasks /my-tasks fehlgeschlagen:', error.response?.data || error.message);
    }

    try {
      const response = await axios.get(`${API_BASE_URL}/tasks/my-tasks/stats`, { headers });
      console.log('‚úÖ Tasks /my-tasks/stats:', response.data);
    } catch (error) {
      console.log('‚ùå Tasks /my-tasks/stats fehlgeschlagen:', error.response?.data || error.message);
    }

    // 5. Projects-Endpunkte
    console.log('\n5Ô∏è‚É£ Teste Projects-Endpunkte...');
    
    try {
      const response = await axios.get(`${API_BASE_URL}/projects`, { headers });
      console.log('‚úÖ Projects /:', {
        count: response.data.projects?.length || 0
      });
    } catch (error) {
      console.log('‚ùå Projects / fehlgeschlagen:', error.response?.data || error.message);
    }

    // 6. Admin-Endpunkte
    console.log('\n6Ô∏è‚É£ Teste Admin-Endpunkte...');
    
    try {
      const response = await axios.get(`${API_BASE_URL}/admin/users`, { headers });
      console.log('‚úÖ Admin /users:', {
        count: response.data.users?.length || 0,
        pagination: response.data.pagination
      });
    } catch (error) {
      console.log('‚ùå Admin /users fehlgeschlagen:', error.response?.data || error.message);
    }

    try {
      const response = await axios.get(`${API_BASE_URL}/admin/health`, { headers });
      console.log('‚úÖ Admin /health:', response.data);
    } catch (error) {
      console.log('‚ùå Admin /health fehlgeschlagen:', error.response?.data || error.message);
    }

    // 7. Teams-Endpunkte
    console.log('\n7Ô∏è‚É£ Teste Teams-Endpunkte...');
    
    try {
      const response = await axios.get(`${API_BASE_URL}/teams`, { headers });
      console.log('‚úÖ Teams /:', {
        count: response.data.teams?.length || 0
      });
    } catch (error) {
      console.log('‚ùå Teams / fehlgeschlagen:', error.response?.data || error.message);
    }

    // 8. Notifications-Endpunkte
    console.log('\n8Ô∏è‚É£ Teste Notifications-Endpunkte...');
    
    try {
      const response = await axios.get(`${API_BASE_URL}/notifications`, { headers });
      console.log('‚úÖ Notifications /:', {
        count: response.data.notifications?.length || 0
      });
    } catch (error) {
      console.log('‚ùå Notifications / fehlgeschlagen:', error.response?.data || error.message);
    }

    // 9. Teste POST-Endpunkte
    console.log('\n9Ô∏è‚É£ Teste POST-Endpunkte...');
    
    // Teste Projekt-Erstellung
    try {
      const newProject = {
        name: 'API-Test-Projekt',
        description: 'Ein Projekt f√ºr API-Tests',
        status: 'planning',
        priority: 'medium',
        visibility: 'private'
      };
      
      const response = await axios.post(`${API_BASE_URL}/projects`, newProject, { headers });
      console.log('‚úÖ Projekt-Erstellung erfolgreich:', response.data.project?.name);
    } catch (error) {
      console.log('‚ùå Projekt-Erstellung fehlgeschlagen:', error.response?.data || error.message);
    }

    // 10. Zusammenfassung
    console.log('\nüìã TEST-ZUSAMMENFASSUNG:');
    console.log('‚úÖ Health Check: OK');
    console.log(authToken ? '‚úÖ Authentifizierung: OK' : '‚ùå Authentifizierung: FEHLGESCHLAGEN');
    console.log('‚úÖ Dashboard-Endpunkte: Getestet');
    console.log('‚úÖ Tasks-Endpunkte: Getestet');
    console.log('‚úÖ Projects-Endpunkte: Getestet');
    console.log('‚úÖ Admin-Endpunkte: Getestet');
    console.log('‚úÖ Teams-Endpunkte: Getestet');
    console.log('‚úÖ Notifications-Endpunkte: Getestet');
    console.log('‚úÖ POST-Endpunkte: Getestet');
    
    console.log('\nüéâ API-Tests abgeschlossen!');
    console.log('\nüí° N√§chste Schritte:');
    console.log('   1. Pr√ºfe die Server-Logs auf Fehler');
    console.log('   2. Teste die Frontend-Integration');
    console.log('   3. F√ºhre das Datenbank-Initialisierungsskript aus, falls n√∂tig');

  } catch (error) {
    console.error('‚ùå Test-Suite fehlgeschlagen:', error.message);
  }
}

// F√ºhre Tests aus
testApiEndpoints();
